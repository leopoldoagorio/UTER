ggplot(data = PoEquant(vector_data), aes(x = xp, y = yp)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 1, by = 0.20),
labels = percent) +
scale_y_continuous() +
labs(title = "PoE with quantile function")
ggplot(data = PoEemp(vector_data), aes(x = xp, y = yp)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 1, by = 0.20),
labels = percent) +
scale_y_continuous() +
labs(title = "PoE with empirical function")
#plot PoE in both cases in the same plot with ggplot2 title and labels for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp), color = "red") +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp), color = "blue") +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20),
labels = percent) +
scale_y_continuous()
#plot PoE in both cases in the same plot with ggplot2 title and labels for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp), color = "red") +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp), color = "blue") +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20),
labels = percent) +
scale_y_continuous()
#legend
legend("topright", c("Quantile", "Empirical"), fill = c("red", "blue"))
#legend
legend("topright", c("Quantile", "Empirical"), fill = c("red", "blue"))
#plot PoE in both cases in the same plot with ggplot2 title and labels for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp), color = "red") +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp), color = "blue") +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20),
labels = percent) +
scale_y_continuous()
legend("topright", c("Quantile", "Empirical"), fill = c("red", "blue"))
#define PoE function with quantile function
PoEquant <- function(x) {
xp = (1:100)/100
yp = quantile(x, 1-xp)
return(data.frame(xp,yp))
}
#empiric PoE fucntion
PoEemp <- function(x) {
ordmaxs <- x[order(x, decreasing = TRUE)]
Rank <- 1:length(x)
DF <- data.frame(ordmaxs, Rank)
DF$Prob <-  DF$Rank/(length(DF$Rank) + 1)
xp = DF$Prob
yp = DF$ordmaxs
return(data.frame(xp,yp))
}
vector_data <- c(2.152259, 2.154761, 2.035851, 2.655967, 2.187733, 2.019888, 2.607536, 2.358045, 2.612438, 2.194459, 2.725004, 2.444190, 2.131163, 2.446525, 2.101101,
2.237056, 2.230318, 2.805896, 2.453244, 2.177886, 2.025021, 2.356072, 2.324823, 3.173952, 2.172993, 2.103189, 2.128990, 2.335912, 2.714424, 2.461500,
2.319471, 2.192701, 2.181006, 2.406387, 1.887279, 2.156535, 2.502106, 2.329206, 2.332971, 1.973604, 2.252254, 2.199198, 2.125621, 2.297820, 2.119982,
2.144124, 2.004545, 2.865188, 2.150243, 2.158967, 3.348151, 2.132438, 3.053091, 3.141912, 2.694151, 2.601074, 2.353471, 2.076837, 3.100880, 2.455450,
2.017996, 2.144436, 2.502861, 2.400786, 2.713637, 2.620878, 2.420127, 2.907013, 1.996426, 2.873372, 1.964446, 2.807749, 2.398877, 2.607785, 2.304855,
2.212907, 2.683464, 2.392349, 2.184720, 1.971262, 2.549911, 1.924287, 2.146612, 1.817826, 2.244767, 2.588093, 2.584259, 2.557858, 2.590748, 2.329899,
2.361720, 2.446557, 2.328364, 2.277884, 1.749324, 1.745338, 2.261042, 2.420778, 2.047919, 2.103609)
#plot PoE in both cases in the same plot with ggplot2 title and labels for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp), color = "red") +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp), color = "blue") +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20),
labels = percent) +
scale_y_continuous()
#plot PoE in both cases in the same plot with ggplot2 title and labels for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp), color = "red") +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp), color = "blue") +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20),
labels = percent) +
scale_y_continuous()
legend("topright", c("Quantile", "Empirical"), fill = c("red", "blue"))
#plot PoE in both cases in the same plot with ggplot2 title and legend for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp), color = "red") +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp), color = "blue") +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
guides(color = guide_legend(title = "Method"))
#plot PoE in both cases in the same plot with ggplot2 title and legend for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp), color = "red") +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp), color = "blue") +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
guides(color = guide_legend(title = "Method"))
#plot PoE in both cases in the same plot with ggplot2 title and legend for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp), color = "red") +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp), color = "blue") +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
guides(color = guide_legend(title = "Method",labels = c("Quantile", "Rank")))
#plot PoE in both cases in the same plot with ggplot2 title and legend for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp), color = "red") +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp), color = "blue") +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
guides(color = guide_legend(title = "Method",labels = c("Quantile", "Rank")))
#plot PoE in both cases in the same plot with ggplot2 title and legend for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp), color = "red") +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp), color = "blue") +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
guides(color = guide_legend(title = "Method",labels = c("Quantile", "Rank")))
#plot PoE in both cases in the same plot with ggplot2 title and legend for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp), color = "red") +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp), color = "blue") +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
guides(color = guide_legend(labels = c("Quantile", "Rank")))
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp, color = "Quantile")) +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp, color = "Rank")) +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Quantile" = "red", "Rank" = "blue"),
labels = c("Quantile (red)", "Rank (blue)"))
#plot PoE in both cases in the same plot with ggplot2 title and legend for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp), color = "red") +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp), color = "blue") +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
guides(color = guide_legend(labels = c("Quantile", "Rank")))
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp, color = "Quantile")) +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp, color = "Rank")) +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Quantile" = "red", "Rank" = "blue"),
labels = c("Quantile (red)", "Rank (blue)"))
vector_data <-c(2.152259, 2.154761, 2.035851, 2.655967, 2.187733, 2.019888, 2.607536, 2.358045, 2.612438, 2.194459, 2.725004, 2.444190, 2.131163, 2.446525, 2.101101)
#plot PoE in both cases in the same plot with ggplot2 title and legend for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp, color = "Quantile")) +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp, color = "Rank")) +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Quantile" = "red", "Rank" = "blue"),
labels = c("Quantile method", "Empiric method"))
vector_data <- c(2.152259, 2.154761, 2.035851, 2.655967, 2.187733, 2.019888, 2.607536, 2.358045, 2.612438, 2.194459, 2.725004, 2.444190, 2.131163, 2.446525, 2.101101,
2.237056, 2.230318, 2.805896, 2.453244, 2.177886, 2.025021, 2.356072, 2.324823, 3.173952, 2.172993, 2.103189, 2.128990, 2.335912, 2.714424, 2.461500,
2.319471, 2.192701, 2.181006, 2.406387, 1.887279, 2.156535, 2.502106, 2.329206, 2.332971, 1.973604, 2.252254, 2.199198, 2.125621, 2.297820, 2.119982,
2.144124, 2.004545, 2.865188, 2.150243, 2.158967, 3.348151, 2.132438, 3.053091, 3.141912, 2.694151, 2.601074, 2.353471, 2.076837, 3.100880, 2.455450,
2.017996, 2.144436, 2.502861, 2.400786, 2.713637, 2.620878, 2.420127, 2.907013, 1.996426, 2.873372, 1.964446, 2.807749, 2.398877, 2.607785, 2.304855,
2.212907, 2.683464, 2.392349, 2.184720, 1.971262, 2.549911, 1.924287, 2.146612, 1.817826, 2.244767, 2.588093, 2.584259, 2.557858, 2.590748, 2.329899,
2.361720, 2.446557, 2.328364, 2.277884, 1.749324, 1.745338, 2.261042, 2.420778, 2.047919, 2.103609)
#plot PoE in both cases in the same plot with ggplot2 title and legend for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp, color = "Quantile")) +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp, color = "Rank")) +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Quantile" = "red", "Rank" = "blue"),
labels = c("Quantile method", "Empiric method"))
#given the PoE DF, calculates PoE p% with NO time series
PoEatp <- function(x, p) {
xp = x[,1]
yp = x[,2]
#return(yp[which(xp == p)]) not working, must find greater than
return(yp[which(xp >= p)[1]])
}
PoEatp(PoEemp(vector_data))
PoEatp(PoEemp(vector_data),0.2)
PoEatp(PoEemp(vector_data),0.02)
PoEatp(PoEemp(vector_data),0.00)
PoEatp(PoEemp(vector_data),1.00)
PoEatp(PoEemp(vector_data),0.99)
PoEatp(PoEquant(vector_data),0.99)
# print poe at 0.95 for both methods
print("PoE at 0.95 for quantile method")
PoEatp(PoEquant(vector_data), 0.95)
print("PoE at 0.95 for empiric method")
PoEatp(PoEemp(vector_data), 0.95)
#define PoE function with quantile function given the time series
PoEquant <- function(x) {
xp = (1:100)/100
yp = quantile(x, 1-xp)
return(data.frame(xp,yp))
}
#empiric PoE function given the time series
PoEemp <- function(x) {
ordmaxs <- x[order(x, decreasing = TRUE)]
Rank <- 1:length(x)
DF <- data.frame(ordmaxs, Rank)
DF$Prob <-  DF$Rank/(length(DF$Rank) + 1)
xp = DF$Prob
yp = DF$ordmaxs
return(data.frame(xp,yp))
}
#given the PoE DF, calculates PoE p% with NO time series
PoEatp <- function(x, p) {
xp = x[,1]
yp = x[,2]
#return(yp[which(xp == p)]) not working, must find greater than
return(yp[which(xp >= p)[1]])
}
vector_data <- c(2.152259, 2.154761, 2.035851, 2.655967, 2.187733, 2.019888, 2.607536, 2.358045, 2.612438, 2.194459, 2.725004, 2.444190, 2.131163, 2.446525, 2.101101,
2.237056, 2.230318, 2.805896, 2.453244, 2.177886, 2.025021, 2.356072, 2.324823, 3.173952, 2.172993, 2.103189, 2.128990, 2.335912, 2.714424, 2.461500,
2.319471, 2.192701, 2.181006, 2.406387, 1.887279, 2.156535, 2.502106, 2.329206, 2.332971, 1.973604, 2.252254, 2.199198, 2.125621, 2.297820, 2.119982,
2.144124, 2.004545, 2.865188, 2.150243, 2.158967, 3.348151, 2.132438, 3.053091, 3.141912, 2.694151, 2.601074, 2.353471, 2.076837, 3.100880, 2.455450,
2.017996, 2.144436, 2.502861, 2.400786, 2.713637, 2.620878, 2.420127, 2.907013, 1.996426, 2.873372, 1.964446, 2.807749, 2.398877, 2.607785, 2.304855,
2.212907, 2.683464, 2.392349, 2.184720, 1.971262, 2.549911, 1.924287, 2.146612, 1.817826, 2.244767, 2.588093, 2.584259, 2.557858, 2.590748, 2.329899,
2.361720, 2.446557, 2.328364, 2.277884, 1.749324, 1.745338, 2.261042, 2.420778, 2.047919, 2.103609)
vector_data <-c(2.152259, 2.154761, 2.035851, 2.655967, 2.187733, 2.019888, 2.607536, 2.358045, 2.612438, 2.194459, 2.725004, 2.444190, 2.131163, 2.446525, 2.101101)
#plot PoE in both cases in the same plot with ggplot2 title and legend for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp, color = "Quantile")) +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp, color = "Rank")) +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Quantile" = "red", "Rank" = "blue"),
labels = c("Quantile method", "Empiric method"))
library(ggplot2)
library(MEFM)
library(scales)
#plot PoE in both cases in the same plot with ggplot2 title and legend for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp, color = "Quantile")) +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp, color = "Rank")) +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Quantile" = "red", "Rank" = "blue"),
labels = c("Quantile method", "Empiric method"))
# print poe at 0.95 for both methods
print("PoE at 0.95 for quantile method")
PoEatp(PoEquant(vector_data), 0.95)
print("PoE at 0.95 for empiric method")
PoEatp(PoEemp(vector_data), 0.95)
library(MEFM) # monash energy forecasting model
library(ggplot2) # for plotting
library(scales)
formula.hh <- list()
#p: log(y-o) = h(t) + f(T,t)+cjzj(t)+n(t)
#p ecuaciones, en cada una h=calendario
# f(T,t) efecto de temperatura de las dos estaciones
# cjzj efectos socioeconomicos
# n ruido
for(i in 1:48)
formula.hh[[i]] = as.formula(log(ddemand) ~ ns(temp, df=2) + day
+ holiday + ns(timeofyear, 9) + ns(avetemp, 3) + ns(dtemp, 3) + ns(lastmin, 3)
+ ns(prevtemp1, df=2) + ns(prevtemp2, df=2)
+ ns(prevtemp3, df=2) + ns(prevtemp4, df=2)
+ ns(day1temp, df=2) + ns(day2temp, df=2)
+ ns(day3temp, df=2) + ns(prevdtemp1, 3) + ns(prevdtemp2, 3)
+ ns(prevdtemp3, 3) + ns(day1dtemp, 3))
# formula for annual model, to be given by the user
formula.a <- as.formula(anndemand ~ gsp + ddays + resiprice)
# create lagged temperature variables
sa <- maketemps(sa,2,48)
sa.model <- demand_model(sa, sa.econ, formula.hh, formula.a)
summary(sa.model$a)
summary(sa.model$hh[[33]])
# Simulate future normalized half-hourly data
simdemand <- simulate_ddemand(sa.model, sa, simyears=10)
# seasonal economic and weather forecast, to be given by user
afcast <- data.frame(pop=1694, gsp=22573, resiprice=34.65, ddays=642)
# Simulate half-hourly data
demand <- simulate_demand(simdemand, afcast)
# Illustrate the results
plot(density(demand$annmax, bw="SJ"),
main="Density of seasonal maximum demand", xlab="Demand")
ordmaxs <- demand$annmax[order(demand$annmax, decreasing = TRUE)]
ordmaxs
Rank <- 1:length(demand$annmax)
DF <- data.frame(ordmaxs, Rank)
DF$Prob <-  DF$Rank/(length(DF$Rank) + 1)
DF$Prob
# plot
ggplot(data = DF, aes(x = Prob, y = ordmaxs)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 1, by = 0.20),
labels = percent) +
scale_y_continuous()
library(ggplot2)
library(MEFM)
library(scales)
#define PoE function with quantile function given the time series
PoEquant <- function(x) {
xp = (1:100)/100
yp = quantile(x, 1-xp)
return(data.frame(xp,yp))
}
#empiric PoE function given the time series
PoEemp <- function(x) {
ordmaxs <- x[order(x, decreasing = TRUE)]
Rank <- 1:length(x)
DF <- data.frame(ordmaxs, Rank)
DF$Prob <-  DF$Rank/(length(DF$Rank) + 1)
xp = DF$Prob
yp = DF$ordmaxs
return(data.frame(xp,yp))
}
#given the PoE DF, calculates PoE p% with NO time series
PoEatp <- function(x, p) {
xp = x[,1]
yp = x[,2]
#return(yp[which(xp == p)]) not working, must find greater than
return(yp[which(xp >= p)[1]])
}
vector_data <-c(2.152259, 2.154761, 2.035851, 2.655967, 2.187733, 2.019888, 2.607536, 2.358045, 2.612438, 2.194459, 2.725004, 2.444190, 2.131163, 2.446525, 2.101101)
#plot PoE in both cases in the same plot with ggplot2 title and legend for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp, color = "Quantile")) +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp, color = "Rank")) +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Quantile" = "red", "Rank" = "blue"),
labels = c("Quantile method", "Empiric method"))
# print poe at 0.95 for both methods
print("PoE at 0.95 for quantile method")
PoEatp(PoEquant(vector_data), 0.95)
print("PoE at 0.95 for empiric method")
PoEatp(PoEemp(vector_data), 0.95)
vector_data <- c(2.152259, 2.154761, 2.035851, 2.655967, 2.187733, 2.019888, 2.607536, 2.358045, 2.612438, 2.194459, 2.725004, 2.444190, 2.131163, 2.446525, 2.101101,
2.237056, 2.230318, 2.805896, 2.453244, 2.177886, 2.025021, 2.356072, 2.324823, 3.173952, 2.172993, 2.103189, 2.128990, 2.335912, 2.714424, 2.461500,
2.319471, 2.192701, 2.181006, 2.406387, 1.887279, 2.156535, 2.502106, 2.329206, 2.332971, 1.973604, 2.252254, 2.199198, 2.125621, 2.297820, 2.119982,
2.144124, 2.004545, 2.865188, 2.150243, 2.158967, 3.348151, 2.132438, 3.053091, 3.141912, 2.694151, 2.601074, 2.353471, 2.076837, 3.100880, 2.455450,
2.017996, 2.144436, 2.502861, 2.400786, 2.713637, 2.620878, 2.420127, 2.907013, 1.996426, 2.873372, 1.964446, 2.807749, 2.398877, 2.607785, 2.304855,
2.212907, 2.683464, 2.392349, 2.184720, 1.971262, 2.549911, 1.924287, 2.146612, 1.817826, 2.244767, 2.588093, 2.584259, 2.557858, 2.590748, 2.329899,
2.361720, 2.446557, 2.328364, 2.277884, 1.749324, 1.745338, 2.261042, 2.420778, 2.047919, 2.103609)
#plot PoE in both cases in the same plot with ggplot2 title and legend for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp, color = "Quantile")) +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp, color = "Rank")) +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Quantile" = "red", "Rank" = "blue"),
labels = c("Quantile method", "Empiric method"))
library(RSQLite)
install.packages('RSQLite', repos='http://cran.us.r-project.org')
library(RSQLite)
con <- dbConnect(SQLite(), dbname = "./PDA/Ricaldoni_v1.sqlite")
#load the data from the table "data"
data <- dbGetQuery(con, "SELECT * FROM data")
dbListTables(con)
df <- dbGetQuery(con, "SELECT * FROM POTENCIAS")
View(df)
sums <- dbGetQuery(con, "SELECT * FROM POTENCIAS WHERE Id_estacion==65")
View(sums)
dbDisconnect(con)
library(readr)
#dataloader
#now load the data from the file ./PDA/Ricaldoni_v1.sqlite
library(RSQLite)
con <- dbConnect(SQLite(), dbname = "./PDA/Ricaldoni_v1.sqlite")
#print the tables
dbListTables(con)
#load the data from the table "POTENCIAS" where Id_estacion==65 (sum)
sums <- dbGetQuery(con, "SELECT * FROM POTENCIAS WHERE Id_estacion==65")
#close the connection
dbDisconnect(con)
# now load the data from the dataset.csv
sumscsv <- read_csv("./dataset.csv")
# sanity check
head(sums)
View(sumscsv)
# sanity check
head(sumscsv)
View(sumscsv)
View(sumscsv)
#first filter where longitud == -58
sumscsvf <- filter(sumscsv, longitud == -58)
sumscsv$longitud
sumscsvf <- filter(sumscsv, longitud == -58)
names(sumcsv)
names(sumscsv)
sumscsvf <- filter(sumscsv, sumcsv$longitud == -58)
sumscsvf <- filter(sumscsv, sumscsv$longitud == -58)
str(sumscsv)
sumscsvf <- filter(sumscsv, sumscsv$longitud == -58)
sumscsvf <- sumscsv %>%
dplyr::select(longitud) %>%
filter(longitud == -58)
subset_df <- sumscsv[sumscsv$latitud == -58, ]
subset_df <- sumscsv[sumscsv$latitud == -35, ]
subset_df <- sumscsv[sumscsv$longitud == -54.5, ]
unique(sumscsv$longitud)
unique(sumscsv$latitud)
unique(sumscsv$latitud)[which.min(abs(unique(sumscsv$latitud)+34.9))]
unique(sumscsv$longitud)[which.min(abs(unique(sumscsv$longitud)+56.2))]
sumscsvf <- sumscsv[sumscsv$latitud == -35, sumscsv$longitud == -56.25]
# Find the closest values to Montevideo
closest_lat <- unique(sumscsv$latitud)[which.min(abs(unique(sumscsv$latitud) + 34.9))] # -35
closest_long <- unique(sumscsv$longitud)[which.min(abs(unique(sumscsv$longitud) + 56.2))] # -56.25
# Subset rows where latitud and longitud match the closest values to Montevideo
sumscsvf <- sumscsv[sumscsv$latitud == closest_lat & sumscsv$longitud == closest_long, ]
# now plot the data for the year 2017
sumscsvf_2017 <- sumscsvf[sumscsvf$año == 2017, ]
plot(sumscsvf_2017$hora, sumscsvf_2017$temperatura(°C), type = "l", xlab = "Hora", ylab = "Temperatura (°C)", main = "Temperatura en Montevideo en 2017")
plot(sumscsvf_2017$hora, sumscsvf_2017$temperatura(C), type = "l", xlab = "Hora", ylab = "Temperatura (°C)", main = "Temperatura en Montevideo en 2017")
plot(sumscsvf_2017$hora, sumscsvf_2017$temperatura(°C), type = "l", xlab = "Hora", ylab = "Temperatura (°C)", main = "Temperatura en Montevideo en 2017")
names(sumscsvf)[names(sumscsvf) == "temperatura(°C)"] <- "temperatura_C"
# now plot the data for the year 2017
sumscsvf_2017 <- sumscsvf[sumscsvf$año == 2017, ]
plot(sumscsvf_2017$hora, sumscsvf_2017$temperatura_C, type = "l", xlab = "Hora", ylab = "Temperatura (°C)", main = "Temperatura en Montevideo en 2017")
# Rename the column to use an underscore instead of the degree symbol
names(sumscsvf)[names(sumscsvf) == "temperatura(°C)"] <- "temperatura_C"
# Subset the data for the year 2017
sumscsvf_2017 <- sumscsvf[sumscsvf$año == 2017, ]
unique(sumscsvf$año)
unique(sumscsv$año)
# Plot the temperature data
plot(sumscsvf$hora, sumscsvf_2017$temperatura_C, type = "l", xlab = "Hora", ylab = "Temperatura (°C)", main = "Temperatura en Montevideo en 2017")
# Plot the temperature data
plot(sumscsvf$hora, sumscsvf$temperatura_C, type = "l", xlab = "Hora", ylab = "Temperatura (°C)", main = "Temperatura en Montevideo en 2017")
# Plot the temperature data
plot(sumscsvf$hora, sumscsvf$temperatura_C, type = "l", xlab = "Hora", ylab = "Temperatura (°C)", main = "Temperatura en Montevideo en 2021")
library(ggplot2)
# Plot the mean temperature per day
ggplot(sumscsvf, aes(x = dia, y = temperatura_C)) + geom_point() + geom_line() + geom_smooth() + ggtitle("Mean temperature per day") + xlab("Day") + ylab("Temperature (°C)")
View(sumscsvf)
View(sumscsvf)
# Plot the mean temperature per day
ggplot(sumscsvf, aes(x = día, y = temperatura_C)) + geom_point() + geom_line() + geom_smooth() + ggtitle("Mean temperature per day") + xlab("Day") + ylab("Temperature (°C)")
# Plot the mean temperature per day for month 1
ggplot(sumscsvf[sumscsvf$mes == 1, ], aes(x = dia, y = temperatura_C)) + geom_point() + geom_line() + geom_smooth(method = "lm") + ggtitle("Mean temperature per day for month 1")
# Plot the mean temperature per day for month 1
ggplot(sumscsvf[sumscsvf$mes == 1, ], aes(x = día, y = temperatura_C)) + geom_point() + geom_line() + geom_smooth(method = "lm") + ggtitle("Mean temperature per day for month 1")
library(dplyr)
library(ggplot2)
# Calculate the mean temperature per day for the entire year
sumscsvf_year <- sumscsvf %>%
group_by(año, mes, dia) %>%
summarize(mean_temp = mean(temperatura_C))
# Plot the mean temperature per day for the year
ggplot(sumscsvf_year, aes(x = dia, y = mean_temp)) +
geom_point() +
geom_line() +
geom_smooth(method = "lm") +
ggtitle("Mean temperature per day for the year")
# Calculate the mean temperature per day for the entire year
sumscsvf_year <- sumscsvf %>%
group_by(año, mes, día) %>%
summarize(mean_temp = mean(temperatura_C))
# Plot the mean temperature per day for the year
ggplot(sumscsvf_year, aes(x = día, y = mean_temp)) +
geom_point() +
geom_line() +
geom_smooth(method = "lm") +
ggtitle("Mean temperature per day for the year")
library(lubridate)
# Calculate the mean temperature for each day of the year
sumscsvf_year <- sumscsvf %>%
mutate(day_of_year = yday(as.Date(paste(año, mes, dia, sep = "-")))) %>%
group_by(day_of_year) %>%
summarize(mean_temp = mean(temperatura_C))
# Calculate the mean temperature for each day of the year
sumscsvf_year <- sumscsvf %>%
mutate(day_of_year = yday(as.Date(paste(año, mes, día, sep = "-")))) %>%
group_by(day_of_year) %>%
summarize(mean_temp = mean(temperatura_C))
# Plot the mean temperature for each day of the year
ggplot(sumscsvf_year, aes(x = day_of_year, y = mean_temp)) +
geom_point() +
geom_line() +
geom_smooth(method = "lm") +
ggtitle("Mean temperature per day for the year")
# Plot the mean temperature for each day of the year
ggplot(sumscsvf_year, aes(x = day_of_year, y = mean_temp)) +
geom_point() +
geom_line() +
ggtitle("Mean temperature per day for the year")
# Plot the mean temperature for each day of the year
ggplot(sumscsvf_year, aes(x = day_of_year, y = mean_temp)) +
geom_point() +
geom_line() +
ggtitle("Mean temperature per day for the year in Montevideo")
??aes
