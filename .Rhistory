PoEemp <- function(x) {
ordmaxs <- x[order(x, decreasing = TRUE)]
Rank <- 1:length(x)
DF <- data.frame(ordmaxs, Rank)
DF$Prob <-  DF$Rank/(length(DF$Rank) + 1)
xp = DF$Prob
yp = DF$ordmaxs
return(data.frame(xp,yp))
}
#given the PoE DF, calculates PoE p% with NO time series
PoEatp <- function(x, p) {
xp = x[,1]
yp = x[,2]
#return(yp[which(xp == p)]) not working, must find greater than
return(yp[which(xp >= p)[1]])
}
vector_data <-c(2.152259, 2.154761, 2.035851, 2.655967, 2.187733, 2.019888, 2.607536, 2.358045, 2.612438, 2.194459, 2.725004, 2.444190, 2.131163, 2.446525, 2.101101)
#plot PoE in both cases in the same plot with ggplot2 title and legend for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp, color = "Quantile")) +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp, color = "Rank")) +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Quantile" = "red", "Rank" = "blue"),
labels = c("Quantile method", "Empiric method"))
# print poe at 0.95 for both methods
print("PoE at 0.95 for quantile method")
PoEatp(PoEquant(vector_data), 0.95)
print("PoE at 0.95 for empiric method")
PoEatp(PoEemp(vector_data), 0.95)
vector_data <- c(2.152259, 2.154761, 2.035851, 2.655967, 2.187733, 2.019888, 2.607536, 2.358045, 2.612438, 2.194459, 2.725004, 2.444190, 2.131163, 2.446525, 2.101101,
2.237056, 2.230318, 2.805896, 2.453244, 2.177886, 2.025021, 2.356072, 2.324823, 3.173952, 2.172993, 2.103189, 2.128990, 2.335912, 2.714424, 2.461500,
2.319471, 2.192701, 2.181006, 2.406387, 1.887279, 2.156535, 2.502106, 2.329206, 2.332971, 1.973604, 2.252254, 2.199198, 2.125621, 2.297820, 2.119982,
2.144124, 2.004545, 2.865188, 2.150243, 2.158967, 3.348151, 2.132438, 3.053091, 3.141912, 2.694151, 2.601074, 2.353471, 2.076837, 3.100880, 2.455450,
2.017996, 2.144436, 2.502861, 2.400786, 2.713637, 2.620878, 2.420127, 2.907013, 1.996426, 2.873372, 1.964446, 2.807749, 2.398877, 2.607785, 2.304855,
2.212907, 2.683464, 2.392349, 2.184720, 1.971262, 2.549911, 1.924287, 2.146612, 1.817826, 2.244767, 2.588093, 2.584259, 2.557858, 2.590748, 2.329899,
2.361720, 2.446557, 2.328364, 2.277884, 1.749324, 1.745338, 2.261042, 2.420778, 2.047919, 2.103609)
#plot PoE in both cases in the same plot with ggplot2 title and legend for each method
ggplot() +
geom_line(data = PoEquant(vector_data), aes(x = xp, y = yp, color = "Quantile")) +
geom_line(data = PoEemp(vector_data), aes(x = xp, y = yp, color = "Rank")) +
labs(title = "PoE", x = "Probability", y = "Value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.20), labels = percent) +
scale_y_continuous() +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Quantile" = "red", "Rank" = "blue"),
labels = c("Quantile method", "Empiric method"))
library(RSQLite)
install.packages('RSQLite', repos='http://cran.us.r-project.org')
library(RSQLite)
con <- dbConnect(SQLite(), dbname = "./PDA/Ricaldoni_v1.sqlite")
#load the data from the table "data"
data <- dbGetQuery(con, "SELECT * FROM data")
dbListTables(con)
df <- dbGetQuery(con, "SELECT * FROM POTENCIAS")
View(df)
sums <- dbGetQuery(con, "SELECT * FROM POTENCIAS WHERE Id_estacion==65")
View(sums)
dbDisconnect(con)
library(readr)
#dataloader
#now load the data from the file ./PDA/Ricaldoni_v1.sqlite
library(RSQLite)
con <- dbConnect(SQLite(), dbname = "./PDA/Ricaldoni_v1.sqlite")
#print the tables
dbListTables(con)
#load the data from the table "POTENCIAS" where Id_estacion==65 (sum)
sums <- dbGetQuery(con, "SELECT * FROM POTENCIAS WHERE Id_estacion==65")
#close the connection
dbDisconnect(con)
# now load the data from the dataset.csv
sumscsv <- read_csv("./dataset.csv")
# sanity check
head(sums)
View(sumscsv)
# sanity check
head(sumscsv)
View(sumscsv)
View(sumscsv)
#first filter where longitud == -58
sumscsvf <- filter(sumscsv, longitud == -58)
sumscsv$longitud
sumscsvf <- filter(sumscsv, longitud == -58)
names(sumcsv)
names(sumscsv)
sumscsvf <- filter(sumscsv, sumcsv$longitud == -58)
sumscsvf <- filter(sumscsv, sumscsv$longitud == -58)
str(sumscsv)
sumscsvf <- filter(sumscsv, sumscsv$longitud == -58)
sumscsvf <- sumscsv %>%
dplyr::select(longitud) %>%
filter(longitud == -58)
subset_df <- sumscsv[sumscsv$latitud == -58, ]
subset_df <- sumscsv[sumscsv$latitud == -35, ]
subset_df <- sumscsv[sumscsv$longitud == -54.5, ]
unique(sumscsv$longitud)
unique(sumscsv$latitud)
unique(sumscsv$latitud)[which.min(abs(unique(sumscsv$latitud)+34.9))]
unique(sumscsv$longitud)[which.min(abs(unique(sumscsv$longitud)+56.2))]
sumscsvf <- sumscsv[sumscsv$latitud == -35, sumscsv$longitud == -56.25]
# Find the closest values to Montevideo
closest_lat <- unique(sumscsv$latitud)[which.min(abs(unique(sumscsv$latitud) + 34.9))] # -35
closest_long <- unique(sumscsv$longitud)[which.min(abs(unique(sumscsv$longitud) + 56.2))] # -56.25
# Subset rows where latitud and longitud match the closest values to Montevideo
sumscsvf <- sumscsv[sumscsv$latitud == closest_lat & sumscsv$longitud == closest_long, ]
# now plot the data for the year 2017
sumscsvf_2017 <- sumscsvf[sumscsvf$año == 2017, ]
plot(sumscsvf_2017$hora, sumscsvf_2017$temperatura(°C), type = "l", xlab = "Hora", ylab = "Temperatura (°C)", main = "Temperatura en Montevideo en 2017")
plot(sumscsvf_2017$hora, sumscsvf_2017$temperatura(C), type = "l", xlab = "Hora", ylab = "Temperatura (°C)", main = "Temperatura en Montevideo en 2017")
plot(sumscsvf_2017$hora, sumscsvf_2017$temperatura(°C), type = "l", xlab = "Hora", ylab = "Temperatura (°C)", main = "Temperatura en Montevideo en 2017")
names(sumscsvf)[names(sumscsvf) == "temperatura(°C)"] <- "temperatura_C"
# now plot the data for the year 2017
sumscsvf_2017 <- sumscsvf[sumscsvf$año == 2017, ]
plot(sumscsvf_2017$hora, sumscsvf_2017$temperatura_C, type = "l", xlab = "Hora", ylab = "Temperatura (°C)", main = "Temperatura en Montevideo en 2017")
# Rename the column to use an underscore instead of the degree symbol
names(sumscsvf)[names(sumscsvf) == "temperatura(°C)"] <- "temperatura_C"
# Subset the data for the year 2017
sumscsvf_2017 <- sumscsvf[sumscsvf$año == 2017, ]
unique(sumscsvf$año)
unique(sumscsv$año)
# Plot the temperature data
plot(sumscsvf$hora, sumscsvf_2017$temperatura_C, type = "l", xlab = "Hora", ylab = "Temperatura (°C)", main = "Temperatura en Montevideo en 2017")
# Plot the temperature data
plot(sumscsvf$hora, sumscsvf$temperatura_C, type = "l", xlab = "Hora", ylab = "Temperatura (°C)", main = "Temperatura en Montevideo en 2017")
# Plot the temperature data
plot(sumscsvf$hora, sumscsvf$temperatura_C, type = "l", xlab = "Hora", ylab = "Temperatura (°C)", main = "Temperatura en Montevideo en 2021")
library(ggplot2)
# Plot the mean temperature per day
ggplot(sumscsvf, aes(x = dia, y = temperatura_C)) + geom_point() + geom_line() + geom_smooth() + ggtitle("Mean temperature per day") + xlab("Day") + ylab("Temperature (°C)")
View(sumscsvf)
View(sumscsvf)
# Plot the mean temperature per day
ggplot(sumscsvf, aes(x = día, y = temperatura_C)) + geom_point() + geom_line() + geom_smooth() + ggtitle("Mean temperature per day") + xlab("Day") + ylab("Temperature (°C)")
# Plot the mean temperature per day for month 1
ggplot(sumscsvf[sumscsvf$mes == 1, ], aes(x = dia, y = temperatura_C)) + geom_point() + geom_line() + geom_smooth(method = "lm") + ggtitle("Mean temperature per day for month 1")
# Plot the mean temperature per day for month 1
ggplot(sumscsvf[sumscsvf$mes == 1, ], aes(x = día, y = temperatura_C)) + geom_point() + geom_line() + geom_smooth(method = "lm") + ggtitle("Mean temperature per day for month 1")
library(dplyr)
library(ggplot2)
# Calculate the mean temperature per day for the entire year
sumscsvf_year <- sumscsvf %>%
group_by(año, mes, dia) %>%
summarize(mean_temp = mean(temperatura_C))
# Plot the mean temperature per day for the year
ggplot(sumscsvf_year, aes(x = dia, y = mean_temp)) +
geom_point() +
geom_line() +
geom_smooth(method = "lm") +
ggtitle("Mean temperature per day for the year")
# Calculate the mean temperature per day for the entire year
sumscsvf_year <- sumscsvf %>%
group_by(año, mes, día) %>%
summarize(mean_temp = mean(temperatura_C))
# Plot the mean temperature per day for the year
ggplot(sumscsvf_year, aes(x = día, y = mean_temp)) +
geom_point() +
geom_line() +
geom_smooth(method = "lm") +
ggtitle("Mean temperature per day for the year")
library(lubridate)
# Calculate the mean temperature for each day of the year
sumscsvf_year <- sumscsvf %>%
mutate(day_of_year = yday(as.Date(paste(año, mes, dia, sep = "-")))) %>%
group_by(day_of_year) %>%
summarize(mean_temp = mean(temperatura_C))
# Calculate the mean temperature for each day of the year
sumscsvf_year <- sumscsvf %>%
mutate(day_of_year = yday(as.Date(paste(año, mes, día, sep = "-")))) %>%
group_by(day_of_year) %>%
summarize(mean_temp = mean(temperatura_C))
# Plot the mean temperature for each day of the year
ggplot(sumscsvf_year, aes(x = day_of_year, y = mean_temp)) +
geom_point() +
geom_line() +
geom_smooth(method = "lm") +
ggtitle("Mean temperature per day for the year")
# Plot the mean temperature for each day of the year
ggplot(sumscsvf_year, aes(x = day_of_year, y = mean_temp)) +
geom_point() +
geom_line() +
ggtitle("Mean temperature per day for the year")
# Plot the mean temperature for each day of the year
ggplot(sumscsvf_year, aes(x = day_of_year, y = mean_temp)) +
geom_point() +
geom_line() +
ggtitle("Mean temperature per day for the year in Montevideo")
??aes
#dataloader
#now load the data from the file ./PDA/Ricaldoni_v1.sqlite
library(RSQLite)
library(readr)
library(ggplot2)
library(dplyr)
library(lubridate)
library(ggplot2)
library(MEFM)
con <- dbConnect(SQLite(), dbname = "./PDA/Ricaldoni_v1.sqlite")
#print the tables
dbListTables(con)
#load the data from the table "POTENCIAS" where Id_estacion==65 (sum)
mvd_demands <- dbGetQuery(con, "SELECT * FROM POTENCIAS WHERE Id_estacion==65")
#close the connection
dbDisconnect(con)
# load climate data
all_temps <- read_csv("./dataset.csv")
# sanity check
#head(sumscsv) #idx longitud latitud año mes dia hora temperatura(°C)
# print all possible values for the column "longitud"
#unique(sumscsv$longitud)
# print all possible values for the column "latitud"
#unique(sumscsv$latitud)
# Find the closest values to Montevideo
closest_lat <- unique(all_temps$latitud)[which.min(abs(unique(all_temps$latitud) + 34.9))] # -35
closest_long <- unique(all_temps$longitud)[which.min(abs(unique(all_temps$longitud) + 56.2))] # -56.25
# Subset rows where latitud and longitud match the closest values to Montevideo
mvd_temps <- all_temps[all_temps$latitud == closest_lat & all_temps$longitud == closest_long, ]
# Rename the column to use an underscore instead of the degree symbol
names(mvd_temps)[names(mvd_temps) == "temperatura(°C)"] <- "temperatura_C"
names(sa)
mvd_demands$FechaHum
mvd_demands$FechaHum[0]
mvd_demands$FechaHum(1)
mvd_demands$FechaHum[5]
sa = sa
unique(sa$date)
unique(sa$month)
unique(sa$year)
sa$idate
?sa
levels(sa$holiday)
levels(sa$workday)
unique(sa$workday)
unique(sa$Year)
unique(sa$fyear)
View(mvd_temps)
View(mvd_temps)
as.Date(mvd_temps$FechaHum, format = "%Y-%m-%d %H:%M:%S")
as.Date(mvd_demands$FechaHum, format = "%Y-%m-%d %H:%M:%S")
testdf <- as.Date(mvd_demands$FechaHum, format = "%Y-%m-%d %H:%M:%S")
?testdf
??testdf
weekdays(testdf)
View(mvd_demands)
View(mvd_demands)
testdf
as.Date("2008-02-11")
weekdays(as.Date("2008-02-11"))
weekdays(as.Date("2008-02-11 23:00:00"))
hour(as.Date("2008-02-11 23:00:00"))
as.Date("2008-02-11 23:00:00")
as.POSIXlt("2008-02-11 23:00:00")
hour(as.POSIXlt("2008-02-11 23:00:00"))
minute(as.POSIXlt("2008-02-11 23:00:00"))
weekdays(as.POSIXlt("2008-02-11 23:00:00"))
weekday(as.POSIXlt("2008-02-11 23:00:00"))
weekdays(as.POSIXlt("2008-02-11 23:00:00"))
?weekdays
weekdays(as.POSIXlt("2008-02-11 23:00:00"), abbreviate = FALSE)
year(as.POSIXlt("2008-02-11 23:00:00"), abbreviate = FALSE)
year(as.POSIXlt("2008-02-11 23:00:00"))
# month(int) 1..12
# year(int) 2008..2017
# day(Factor w/7 levels "Mon","Tue","Wed","Thu","Fri","Sat","Sun")
# idate (int) a numeric vector giving the date in days since 1 January 1900.
# holiday (Factor w/4 levels "Normal", "Day before", "Holiday", "Day after")
# workday (char) "WD" or "NWD"
# timeofyear (Time-Series) a numerical time series giving the time in days since midnight on 1 January of each year. example 6.02
# Year (Time-series) a numeric time series giving the time in years. Example 2000.146
# fyear (num) a numeric vector giving the financial year. Example 2000
#create DF mydf with the columns we need
mydf <- data.frame(mvd_temps$FechaHum)
# convert to date
mydf$posix <- as.POSIXlt(mydf$FechaHum)
# month(int) 1..12
# year(int) 2008..2017
# day(Factor w/7 levels "Mon","Tue","Wed","Thu","Fri","Sat","Sun")
# idate (int) a numeric vector giving the date in days since 1 January 1900.
# holiday (Factor w/4 levels "Normal", "Day before", "Holiday", "Day after")
# workday (char) "WD" or "NWD"
# timeofyear (Time-Series) a numerical time series giving the time in days since midnight on 1 January of each year. example 6.02
# Year (Time-series) a numeric time series giving the time in years. Example 2000.146
# fyear (num) a numeric vector giving the financial year. Example 2000
#create DF mydf with the columns we need
mydf <- data.frame(mvd_demands$FechaHum)
# convert to date
mydf$posix <- as.POSIXlt(mydf$FechaHum)
# convert to date
mydf$FechaHum <- as.POSIXlt(mydf$FechaHum)
View(mydf)
#dataloader
#now load the data from the file ./PDA/Ricaldoni_v1.sqlite
library(RSQLite)
library(readr)
library(ggplot2)
library(dplyr)
library(lubridate)
library(ggplot2)
library(MEFM)
sa <- sa # South Australia data frame
con <- dbConnect(SQLite(), dbname = "./PDA/Ricaldoni_v1.sqlite")
#print the tables
dbListTables(con)
#load the data from the table "POTENCIAS" where Id_estacion==65 (sum)
mvd_demands <- dbGetQuery(con, "SELECT * FROM POTENCIAS WHERE Id_estacion==65")
#close the connection
dbDisconnect(con)
# load climate data
all_temps <- read_csv("./dataset.csv")
# sanity check
#head(sumscsv) #idx longitud latitud año mes dia hora temperatura(°C)
# print all possible values for the column "longitud"
#unique(sumscsv$longitud)
# print all possible values for the column "latitud"
#unique(sumscsv$latitud)
# Find the closest values to Montevideo
closest_lat <- unique(all_temps$latitud)[which.min(abs(unique(all_temps$latitud) + 34.9))] # -35
closest_long <- unique(all_temps$longitud)[which.min(abs(unique(all_temps$longitud) + 56.2))] # -56.25
# Subset rows where latitud and longitud match the closest values to Montevideo
mvd_temps <- all_temps[all_temps$latitud == closest_lat & all_temps$longitud == closest_long, ]
# Rename the column to use an underscore instead of the degree symbol
names(mvd_temps)[names(mvd_temps) == "temperatura(°C)"] <- "temperatura_C"
# convert to date
posixtest<- as.POSIXlt(mydf$FechaHum)
# extract date components
mvd_temps$day <- weekdays(mvd_temps$date)
# convert to date
posixtest<- as.POSIXlt(mvd_demands$FechaHum)
day(posixtest)
date <- day(posixtest)
month <- month(posixtest)
year <- year(posixtest)
day <- weekdays(posixtest) # "Mon","Tue","Wed","Thu","Fri","Sat","Sun"
idate <- as.numeric(as.Date(mvd_demands$FechaHum))
holiday <- as.factor("Normal")
workday <- as.factor("WD")
timeofyear <- as.numeric(as.Date(mvd_demands$FechaHum))
Year <- as.numeric(as.Date(mvd_demands$FechaHum))
fyear <- as.numeric(as.Date(mvd_demands$FechaHum))
date <- as.integer(format(as.Date(FechaHum), "%d"))
month <- as.integer(format(as.Date(FechaHum), "%m"))
year <- as.integer(format(as.Date(FechaHum), "%Y"))
day <- factor(weekdays(as.Date(FechaHum)))
idate <- as.integer(as.Date(FechaHum)) - as.integer("1899-12-30")
holiday <- factor("Normal") # Assuming it is not a holiday
workday <- ifelse (day %in% c("Sat", "Sun"), "NWD", "WD")
timeofyear <- as.numeric((as.POSIXct(FechaHum) - as.POSIXct("2008-01-01 00:00:00")) / 86400)
Year <- as.numeric((as.POSIXct (FechaHum) - as.POSIXct ("2000-01-01 00:00:00")) / 86400) / 365
fyear <- format (as.Date (FechaHum), "%Y")
FechaHum <- mvd_demands$FechaHum
date <- as.integer(format(as.Date(FechaHum), "%d"))
month <- as.integer(format(as.Date(FechaHum), "%m"))
year <- as.integer(format(as.Date(FechaHum), "%Y"))
day <- factor(weekdays(as.Date(FechaHum)))
idate <- as.integer(as.Date(FechaHum)) - as.integer("1899-12-30")
holiday <- factor("Normal") # Assuming it is not a holiday
workday <- ifelse (day %in% c("Sat", "Sun"), "NWD", "WD")
timeofyear <- as.numeric((as.POSIXct(FechaHum) - as.POSIXct("2008-01-01 00:00:00")) / 86400)
Year <- as.numeric((as.POSIXct (FechaHum) - as.POSIXct ("2000-01-01 00:00:00")) / 86400) / 365
fyear <- format (as.Date (FechaHum), "%Y")
FechaHum <- "2008-01-01 03:00:00"
date <- as.integer(format(as.Date(FechaHum), "%d"))
month <- as.integer(format(as.Date(FechaHum), "%m"))
year <- as.integer(format(as.Date(FechaHum), "%Y"))
day <- factor(weekdays(as.Date(FechaHum)))
idate <- as.integer(as.Date(FechaHum)) - as.integer("1899-12-30")
holiday <- factor("Normal") # Assuming it is not a holiday
workday <- ifelse (day %in% c("Sat", "Sun"), "NWD", "WD")
timeofyear <- as.numeric((as.POSIXct(FechaHum) - as.POSIXct("2008-01-01 00:00:00")) / 86400)
Year <- as.numeric((as.POSIXct (FechaHum) - as.POSIXct ("2000-01-01 00:00:00")) / 86400) / 365
fyear <- format (as.Date (FechaHum), "%Y")
?sa
unique(sa$anndemand)
unique(sa$year)
48*365
range(sa$ddemand)
unique(sa$ddemand)
order(unique(sa$ddemand))
#dataloader
#now load the data from the file ./PDA/Ricaldoni_v1.sqlite
library(RSQLite)
library(readr)
library(ggplot2)
library(dplyr)
library(lubridate)
library(ggplot2)
library(MEFM)
con <- dbConnect(SQLite(), dbname = "./PDA/Ricaldoni_v1.sqlite")
#print the tables
dbListTables(con)
#load the data from the table "POTENCIAS" where Id_estacion==65 (sum)
sums <- dbGetQuery(con, "SELECT * FROM POTENCIAS WHERE Id_estacion==65")
#close the connection
dbDisconnect(con)
# now load the data from the dataset.csv
sumscsv <- read_csv("./dataset.csv")
# sanity check
head(sumscsv) #idx longitud latitud año mes dia hora temperatura(°C)
# print all possible values for the column "longitud"
unique(sumscsv$longitud)
# print all possible values for the column "latitud"
unique(sumscsv$latitud)
# Find the closest values to Montevideo
closest_lat <- unique(sumscsv$latitud)[which.min(abs(unique(sumscsv$latitud) + 34.9))] # -35
closest_long <- unique(sumscsv$longitud)[which.min(abs(unique(sumscsv$longitud) + 56.2))] # -56.25
# Subset rows where latitud and longitud match the closest values to Montevideo
sumscsvf <- sumscsv[sumscsv$latitud == closest_lat & sumscsv$longitud == closest_long, ]
# Rename the column to use an underscore instead of the degree symbol
names(sumscsvf)[names(sumscsvf) == "temperatura(°C)"] <- "temperatura_C"
# Plot the mean temperature per day for month 1
ggplot(sumscsvf[sumscsvf$mes == 1, ], aes(x = día, y = temperatura_C)) + geom_point() + geom_line() + geom_smooth(method = "lm") + ggtitle("Mean temperature per day for month 1")
# Calculate the mean temperature for each day of the year
sumscsvf_year <- sumscsvf %>%
mutate(day_of_year = yday(as.Date(paste(año, mes, día, sep = "-")))) %>%
group_by(day_of_year) %>%
summarize(mean_temp = mean(temperatura_C))
# Plot the mean temperature for each day of the year
ggplot(sumscsvf_year, aes(x = day_of_year, y = mean_temp)) +
geom_point() +
geom_line() +
ggtitle("Mean temperature per day for the year in Montevideo")
#generate the mvd data frame with the same structure as the sa data frame
#how can i generate a DF with the same structure as the sa data frame?
head(sa)
View(sumscsv)
View(sumscsv)
unique(sumscsv$longitud)
unique(sumscsv$latitud)
unique(sa$month)
FechaHum <- "2008-01-01 03:00:00"
date <- as.integer(format(as.Date(FechaHum), "%d"))
month <- as.integer(format(as.Date(FechaHum), "%m"))
year <- as.integer(format(as.Date(FechaHum), "%Y"))
day <- factor(weekdays(as.Date(FechaHum)))
idate <- as.integer(as.Date(FechaHum)) - as.integer("1899-12-30")
holiday <- factor("Normal") # Assuming it is not a holiday
workday <- ifelse (day %in% c("Sat", "Sun"), "NWD", "WD")
timeofyear <- as.numeric((as.POSIXct(FechaHum) - as.POSIXct("2008-01-01 00:00:00")) / 86400)
Year <- as.numeric((as.POSIXct (FechaHum) - as.POSIXct ("2000-01-01 00:00:00")) / 86400) / 365
fyear <- format (as.Date (FechaHum), "%Y")
as.integer(format(as.Date(FechaHum), "%d"))
as.integer(format(as.Date("2008-01-01 03:00:00"), "%d"))
as.integer(format(as.Date("2008-01-05 03:00:00"), "%d"))
as.integer(format(as.Date("2008-09-05 03:00:00"), "%d"))
as.integer(format(as.Date("2008-09-09 03:00:00"), "%d"))
year
month
day
Sys.setlocale("LC_TIME", "en_US")
Sys.setlocale("LC_TIME","English United States")
Sys.setlocale("LC_TIME", "C")
day <- factor(weekdays(as.Date(FechaHum)))
day
wday(FechaHum)
wday(as.Date(FechaHum))
day <- factor(weekdays(as.Date(FechaHum),abbreviate=TRUE))
day
idate
as.integer("1899-12-30")
as.posixct("1899-12-30")
as.POSIXct("1899-12-30")
as.POSIXct.numeric("1899-12-30")
as.POSIXct("1899-12-30")
as.POSIXct("1899-12-30")/86400
workday
# Load necessary packages
library(lubridate)
library(data.table)
# Convert to datetime object and extract date, month, year, day, time of year, and year
mvd_demands$datetime <- ymd_hms(mvd_demands$FechaHum)
mvd_demands$date <- day(mvd_demands$datetime)
mvd_demands$month <- month(mvd_demands$datetime)
mvd_demands$year <- year(mvd_demands$datetime)
mvd_demands$day <- wday(mvd_demands$datetime, label = TRUE)
mvd_demands$timeofyear <- as.numeric(mvd_demands$datetime - floor_date(mvd_demands$datetime, "year"), units = "days")
mvd_demands$Year <- as.numeric(format(mvd_demands$datetime, "%Y"))
# Create idate variable
mvd_demands$idate <- as.integer(as.Date(mvd_demands$FechaHum))
# Create holiday and workday variables
holidays <- data.frame(date = as.Date(c("2008-01-01", "2008-01-06", "2008-03-24", "2008-03-25")),
name = c("Holiday", "Day after", "Day before", "Holiday"))
setDT(mvd_demands)[, holiday := factor(ifelse(date %in% holidays$date, holidays$name[match(date, holidays$date)], "Normal"))]
setDT(mvd_demands)[, workday := ifelse(day %in% c("Sat", "Sun") | holiday != "Normal", "NWD", "WD")]
# Create fyear variable
mvd_demands$fyear <- ifelse(month(mvd_demands$datetime) <= 6, year(mvd_demands$datetime) - 1, year(mvd_demands$datetime))
# Print the final dataframe
mvd_demands
View(mvd_demands)
mvd_demands$day <- wday(mvd_demands$datetime, label = TRUE)
mvd_demands$day <- wdamvd_demands$day <- factor(weekdays((mvd_demands$datetime, label = TRUE)))y(mvd_demands$datetime)
mvd_demands$day <- factor(weekdays(mvd_demands$datetime, abbreviate = TRUE))
unique(mvd_demand$workday)
unique(mvd_demands$workday)
unique(mvd_demands$day)
setDT(mvd_demands)[, workday := ifelse(day %in% c("Sat", "Sun") | holiday != "Normal", "NWD", "WD")]
unique(mvd_demands$workday)
mvd_demand$idate
mvd_demands$idate
as.integer(as.Date("1900-01-02 03:00:00"))
as.integer(as.Date("1900-01-01 03:00:00"))
as.integer(as.Date("1900-01-01"))
floor_date(mvd_demands$datetime, "year")
mvd_demands$Year <- as.numeric(format(mvd_demands$datetime, "%Y"),unit="years")
mvd_demands$Year
mvd_demands$Year <- as.numeric(format(mvd_demands$datetime, "%Y")) + as.numeric(format(mvd_demands$datetime, "%j")) / 365
mvd_demands$Year
?sa
# Create fyear variable
mvd_demands$fyear <- as.numeric(format(mvd_demands$datetime, "%Y"))#ifelse(month(mvd_demands$datetime) <= 6, year(mvd_demands$datetime) - 1, year(mvd_demands$datetime))
fyear
mvd_demands$fyear
